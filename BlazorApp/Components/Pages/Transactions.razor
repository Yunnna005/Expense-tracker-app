@page "/transactions"
@using BlazorBootstrap

<section class="section-page">

<div class="d-flex justify-content-between align-items-center mb-3">
    <h4>Transactions</h4>
    <Button Color="ButtonColor.Primary">Add New Transaction</Button>
</div>
<div class="mt-3">
<Grid @ref="grid"
      TItem="Transaction"
      Class="table table-hover table-bordered"
      DataProvider="TransactionsDataProvider"
      FixedHeader="true"
      AllowFiltering="true"
      AllowPaging="true"
      PageSize="5"
    PageSizeSelectorVisible="false" 
      PageSizeSelectorItems="@(new int[] { 5,10,20 })"
      Height="380"
      Responsive="true"
      Unit="Unit.Px"
      > 

    <GridColumns>
        <GridColumn TItem="Transaction" HeaderText="Id" PropertyName="Id" Filterable="false">
            @context.Id
        </GridColumn>
        <GridColumn TItem="Transaction" HeaderText="Date" PropertyName="Date" FilterTextboxWidth="100">
            @context.Date.ToString("yyyy-MM-dd")
        </GridColumn>
        <GridColumn TItem="Transaction" HeaderText="Description" PropertyName="Description">
            @context.Description
        </GridColumn>
        <GridColumn TItem="Transaction" HeaderText="Amount" PropertyName="Amount" FilterTextboxWidth="100">
            <span class="@(context.Amount < 0 ? "text-danger" : "text-success")">
                @context.Amount.ToString("C")
            </span>
        </GridColumn>
        <GridColumn TItem="Transaction" HeaderText="Status" PropertyName="Status" FilterTextboxWidth="100">
            <span class="badge @(GetStatusClass(context.Status))">
                @context.Status
            </span>
        </GridColumn>
        <GridColumn TItem="Transaction" HeaderText="Action" PropertyName="Action" Filterable="false">
            <Button class="m-1" Color="ButtonColor.Secondary" Size="ButtonSize.Small" Outline="true" > Modify </Button>
            <Button class="m-1" Color="ButtonColor.Danger" Size="ButtonSize.Small" Outline="true"> Remove </Button>
        </GridColumn>
    </GridColumns>

</Grid>
</div>

</section>
@code {
    public class Transaction
    {
        public int Id { get; set; }
        public DateTime Date { get; set; }           
        public string Description { get; set; } = ""; 
        public decimal Amount { get; set; }           
        public string Status { get; set; } = "";       
    }

    BlazorBootstrap.Grid<Transaction> grid = default!;
    private IEnumerable<Transaction> employees = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<GridDataProviderResult<Transaction>> TransactionsDataProvider(GridDataProviderRequest<Transaction> request)
    {
        if (employees is null) 
            employees = GetEmployees(); 

        return await Task.FromResult(request.ApplyTo(employees));
    }

    private string GetStatusClass(string status)
{
    return status switch
    {
        "Completed" => "bg-success",
        "Pending"   => "bg-warning text-dark",
        "Failed"    => "bg-danger ",
        _           => "bg-secondary"
    };
}

    private IEnumerable<Transaction> GetEmployees()
    {
        return new List<Transaction>
        {
            new() { Id = 1, Date = DateTime.Today.AddDays(-2), Description = "Grocery", Amount = -50.25m, Status = "Completed" },
            new() { Id = 2, Date = DateTime.Today.AddDays(-1), Description = "Electricity Bill", Amount = 75.00m, Status = "Pending" },
            new() { Id = 3, Date = DateTime.Today, Description = "Salary", Amount = 1500.00m, Status = "Completed" },
            new() { Id = 4, Date = DateTime.Today.AddDays(-5), Description = "Subscription", Amount = 9.99m, Status = "Failed"},
            new() { Id = 5, Date = DateTime.Today.AddDays(-3), Description = "Restaurant", Amount = -32.10m, Status = "Completed" },
            new() { Id = 7, Date = DateTime.Today.AddDays(-2), Description = "Grocery", Amount = -50.25m, Status = "Completed" },
            new() { Id = 8, Date = DateTime.Today.AddDays(-1), Description = "Electricity Bill", Amount = 75.00m, Status = "Pending" },
            new() { Id = 9, Date = DateTime.Today, Description = "Salary", Amount = 1500.00m, Status = "Completed" },
            new() { Id = 10, Date = DateTime.Today.AddDays(-5), Description = "Subscription", Amount = 9.99m, Status = "Failed"},
            new() { Id = 11, Date = DateTime.Today.AddDays(-3), Description = "Restaurant", Amount = 32.10m, Status = "Completed" },
            new() { Id = 12, Date = DateTime.Today.AddDays(-2), Description = "Grocery", Amount = 50.25m, Status = "Completed" },
            new() { Id = 22, Date = DateTime.Today.AddDays(-1), Description = "Electricity Bill", Amount = 75.00m, Status = "Pending" },
            new() { Id = 33, Date = DateTime.Today, Description = "Salary", Amount = 1500.00m, Status = "Completed" },
            new() { Id = 4, Date = DateTime.Today.AddDays(-5), Description = "Subscription", Amount = 9.99m, Status = "Failed"},
            new() { Id = 5, Date = DateTime.Today.AddDays(-3), Description = "Restaurant", Amount = -32.10m, Status = "Completed" },
            new() { Id = 7, Date = DateTime.Today.AddDays(-2), Description = "Grocery", Amount = 50.25m, Status = "Completed" },
            new() { Id = 8, Date = DateTime.Today.AddDays(-1), Description = "Electricity Bill", Amount = 75.00m, Status = "Pending" },
            new() { Id = 9, Date = DateTime.Today, Description = "Salary", Amount = 1500.00m, Status = "Completed" },
            new() { Id = 10, Date = DateTime.Today.AddDays(-5), Description = "Subscription", Amount = 9.99m, Status = "Failed"},
            new() { Id = 11, Date = DateTime.Today.AddDays(-3), Description = "Restaurant", Amount = 32.10m, Status = "Completed" },
        };
    }
}
